name: PR with Version Bump

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, closed ]

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'version:patch') || contains(github.event.pull_request.labels.*.name, 'version:minor') || contains(github.event.pull_request.labels.*.name, 'version:major')
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Determine version type
      id: version
      run: |
        if [[ "${{ github.event.pull_request.labels.*.name }}" == *"version:major"* ]]; then
          echo "type=major" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.pull_request.labels.*.name }}" == *"version:minor"* ]]; then
          echo "type=minor" >> $GITHUB_OUTPUT
        else
          echo "type=patch" >> $GITHUB_OUTPUT
        fi
        
    - name: Get current version
      id: current-version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
    - name: Calculate next version
      id: next-version
      run: |
        CURRENT_VERSION="${{ steps.current-version.outputs.current }}"
        VERSION_TYPE="${{ steps.version.outputs.type }}"
        
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        case $VERSION_TYPE in
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "patch")
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "next=$NEXT_VERSION" >> $GITHUB_OUTPUT
        
    - name: Update version in package.json
      run: |
        npm version ${{ steps.version.outputs.type }} --no-git-tag-version
        echo "Updated version to $(node -p "require('./package.json').version")"
        
    - name: Build library
      run: npm run build
      
    - name: Build Storybook
      run: npm run build-storybook
      
    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git fetch origin ${{ github.head_ref }}
        git add package.json package-lock.json
        git commit -m "chore: bump version to ${{ steps.next-version.outputs.next }}"
        git pull origin ${{ github.head_ref }} --rebase || git pull origin ${{ github.head_ref }} --strategy=recursive -X theirs
        git push origin HEAD:${{ github.head_ref }}
        
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Version Bump Applied!**
            
            **Current Version**: ${{ steps.current-version.outputs.current }}
            **Next Version**: ${{ steps.next-version.outputs.next }}
            **Version Type**: ${{ steps.version.outputs.type }}
            
            When this PR is merged, version ${{ steps.next-version.outputs.next }} will be automatically published to NPM!`
          })

  # Job que roda quando o PR Ã© merged
  publish-on-merge:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && (contains(github.event.pull_request.labels.*.name, 'version:patch') || contains(github.event.pull_request.labels.*.name, 'version:minor') || contains(github.event.pull_request.labels.*.name, 'version:major'))
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build library
      run: npm run build
      
    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.next-version.outputs.next }}
        release_name: Release v${{ steps.next-version.outputs.next }}
        draft: false
        prerelease: false
